//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Query {
    
    
    public partial class Where {
        
        static Root_Query_Comment _root_query_Comment = new Root_Query_Comment();
        
        public static Root_Query_Comment Comment {
            get {
                return _root_query_Comment;
            }
        }
        
        public partial class Query_Comment<T1> : Query.QueryBuilder<T1>
         {
            
            public Query_Comment(string name, string assoicationPath) : 
                    base(name, assoicationPath) {
            }
            
            public Query_Comment(string name, string assoicationPath, bool backTrackAssoicationOnEquality) : 
                    base(name, assoicationPath, backTrackAssoicationOnEquality) {
            }
            
            public virtual Query.PropertyQueryBuilder<T1> Name {
                get {
                    string temp = assoicationPath;
                    return new Query.PropertyQueryBuilder<T1>("Name", temp);
                }
            }
            
            public virtual Query.PropertyQueryBuilder<T1> Email {
                get {
                    string temp = assoicationPath;
                    return new Query.PropertyQueryBuilder<T1>("Email", temp);
                }
            }
            
            public virtual Query.PropertyQueryBuilder<T1> HomePage {
                get {
                    string temp = assoicationPath;
                    return new Query.PropertyQueryBuilder<T1>("HomePage", temp);
                }
            }
            
            public virtual Query.PropertyQueryBuilder<T1> Ip {
                get {
                    string temp = assoicationPath;
                    return new Query.PropertyQueryBuilder<T1>("Ip", temp);
                }
            }
            
            public virtual Query.PropertyQueryBuilder<T1> Text {
                get {
                    string temp = assoicationPath;
                    return new Query.PropertyQueryBuilder<T1>("Text", temp);
                }
            }
            
            public virtual Query.QueryBuilder<T1> Id {
                get {
                    string temp = assoicationPath;
                    return new Query.QueryBuilder<T1>("Id", temp);
                }
            }
            
            public virtual Query_Post<T1> Post {
                get {
                    string temp = assoicationPath;
                    temp = ((temp + ".") 
                                + "Post");
                    return new Query_Post<T1>("Post", temp, true);
                }
            }
        }
        
        public partial class Root_Query_Comment : Query_Comment<MyBlog.Comment> {
            
            public Root_Query_Comment() : 
                    base("this", null) {
            }
        }
    }
    
    public partial class OrderBy {
        
        public partial class Comment {
            
            public static Query.OrderByClause Name {
                get {
                    return new Query.OrderByClause("Name");
                }
            }
            
            public static Query.OrderByClause Email {
                get {
                    return new Query.OrderByClause("Email");
                }
            }
            
            public static Query.OrderByClause HomePage {
                get {
                    return new Query.OrderByClause("HomePage");
                }
            }
            
            public static Query.OrderByClause Ip {
                get {
                    return new Query.OrderByClause("Ip");
                }
            }
            
            public static Query.OrderByClause Text {
                get {
                    return new Query.OrderByClause("Text");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        public partial class Comment {
            
            public static Query.PropertyProjectionBuilder Name {
                get {
                    return new Query.PropertyProjectionBuilder("Name");
                }
            }
            
            public static Query.PropertyProjectionBuilder Email {
                get {
                    return new Query.PropertyProjectionBuilder("Email");
                }
            }
            
            public static Query.PropertyProjectionBuilder HomePage {
                get {
                    return new Query.PropertyProjectionBuilder("HomePage");
                }
            }
            
            public static Query.PropertyProjectionBuilder Ip {
                get {
                    return new Query.PropertyProjectionBuilder("Ip");
                }
            }
            
            public static Query.PropertyProjectionBuilder Text {
                get {
                    return new Query.PropertyProjectionBuilder("Text");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        public partial class Comment {
            
            public static NHibernate.Expression.IProjection Name {
                get {
                    return NHibernate.Expression.Projections.GroupProperty("Name");
                }
            }
            
            public static NHibernate.Expression.IProjection Email {
                get {
                    return NHibernate.Expression.Projections.GroupProperty("Email");
                }
            }
            
            public static NHibernate.Expression.IProjection HomePage {
                get {
                    return NHibernate.Expression.Projections.GroupProperty("HomePage");
                }
            }
            
            public static NHibernate.Expression.IProjection Ip {
                get {
                    return NHibernate.Expression.Projections.GroupProperty("Ip");
                }
            }
            
            public static NHibernate.Expression.IProjection Text {
                get {
                    return NHibernate.Expression.Projections.GroupProperty("Text");
                }
            }
        }
    }
}
