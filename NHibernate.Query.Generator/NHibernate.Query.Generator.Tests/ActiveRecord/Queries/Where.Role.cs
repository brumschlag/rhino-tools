//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Role
        /// </summary>
        public static Root_Query_Role Role {
            get {
                return new Root_Query_Role();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Role
        /// </summary>
        public partial class Query_Role<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Role..ctor
            /// </summary>
            public Query_Role(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Role..ctor
            /// </summary>
            public Query_Role(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    return new PropertyQueryBuilder<T1>(this, "Name", temp);
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual QueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    return new QueryBuilder<T1>(this, "Id", temp);
                }
            }
            
            public virtual Query_Collection_Users Users {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Users");
                    return new Query_Collection_Users(this, "Users", temp);
                }
            }
            
            public class Query_Collection_Users : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Users(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_User<T1> With() {
                    Query_User<T1> query = new Query_User<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    return query;
                }
                
                public virtual Query_User<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_User<T1> query = new Query_User<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    return query;
                }
                
                public virtual Query_User<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_User<T1> query = new Query_User<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    return query;
                }
                
                public virtual Query_User<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_User<T1> query = new Query_User<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Role
        /// </summary>
        public partial class Root_Query_Role : Query_Role<NHibernate.Query.Generator.Tests.ActiveRecord.Role> {
            
            /// <summary>
            /// Query helper for member Root_Query_Role..ctor
            /// </summary>
            public Root_Query_Role() : 
                    base(null, "this", null) {
            }
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Role
        /// </summary>
        public partial class Role {
            
            /// <summary>
            /// Query helper for member Role.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Role
        /// </summary>
        public partial class Role {
            
            /// <summary>
            /// Query helper for member Role.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Role
        /// </summary>
        public partial class Role {
            
            /// <summary>
            /// Query helper for member Role.Name
            /// </summary>
            public static NHibernate.Expression.IProjection Name {
                get {
                    return NHibernate.Expression.Projections.GroupProperty("Name");
                }
            }
        }
    }
}
