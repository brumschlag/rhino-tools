//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Query {
    
    
    public partial class Where {
        
        static Root_Query_WeirdClass _root_query_WeirdClass = new Root_Query_WeirdClass();
        
        public static Root_Query_WeirdClass WeirdClass {
            get {
                return _root_query_WeirdClass;
            }
        }
        
        public class Query_WeirdClass<T1> : Query.QueryBuilder<T1>
         {
            
            public Query_WeirdClass(string name, string assoicationPath) : 
                    base(name, assoicationPath) {
            }
            
            public Query_WeirdClass(string name, string assoicationPath, bool backTrackAssoicationOnEquality) : 
                    base(name, assoicationPath, backTrackAssoicationOnEquality) {
            }
            
            public virtual Query_Address<T1> Address {
                get {
                    return new Query_Address<T1>("Address", null);
                }
            }
            
            public virtual Query_Key<T1> Key {
                get {
                    return new Query_Key<T1>("Key", assoicationPath);
                }
            }
            
            public class Query_Address<T2> : Query.QueryBuilder<T2>
             {
                
                public Query_Address(string name, string assoicationPath) : 
                        base(name, assoicationPath) {
                }
                
                public Query_Address(string name, string assoicationPath, bool backTrackAssoicationOnEquality) : 
                        base(name, assoicationPath, backTrackAssoicationOnEquality) {
                }
                
                public virtual Query.PropertyQueryBuilder<T1> Street {
                    get {
                        string temp = assoicationPath;
                        return new Query.PropertyQueryBuilder<T1>("Address.Street", temp);
                    }
                }
            }
            
            public class Query_Key<T3> : Query.QueryBuilder<T3>
             {
                
                public Query_Key(string name, string assoicationPath) : 
                        base(name, assoicationPath) {
                }
                
                public Query_Key(string name, string assoicationPath, bool backTrackAssoicationOnEquality) : 
                        base(name, assoicationPath, backTrackAssoicationOnEquality) {
                }
                
                public virtual Query.PropertyQueryBuilder<T1> Department {
                    get {
                        string temp = assoicationPath;
                        return new Query.PropertyQueryBuilder<T1>("Key.Department", temp);
                    }
                }
                
                public virtual Query.PropertyQueryBuilder<T1> Level {
                    get {
                        string temp = assoicationPath;
                        return new Query.PropertyQueryBuilder<T1>("Key.Level", temp);
                    }
                }
            }
        }
        
        public class Root_Query_WeirdClass {
            
            private string assoicationPath = "this";
            
            public virtual Query_Address<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass> Address {
                get {
                    return new Query_Address<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass>("Address", null);
                }
            }
            
            public virtual Query_Key<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass> Key {
                get {
                    return new Query_Key<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass>("Key", assoicationPath);
                }
            }
            
            public class Query_Address<T4> : Query.QueryBuilder<T4>
             {
                
                public Query_Address(string name, string assoicationPath) : 
                        base(name, assoicationPath) {
                }
                
                public Query_Address(string name, string assoicationPath, bool backTrackAssoicationOnEquality) : 
                        base(name, assoicationPath, backTrackAssoicationOnEquality) {
                }
                
                public virtual Query.PropertyQueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass> Street {
                    get {
                        string temp = assoicationPath;
                        return new Query.PropertyQueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass>("Address.Street", temp);
                    }
                }
            }
            
            public class Query_Key<T5> : Query.QueryBuilder<T5>
             {
                
                public Query_Key(string name, string assoicationPath) : 
                        base(name, assoicationPath) {
                }
                
                public Query_Key(string name, string assoicationPath, bool backTrackAssoicationOnEquality) : 
                        base(name, assoicationPath, backTrackAssoicationOnEquality) {
                }
                
                public virtual Query.PropertyQueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass> Department {
                    get {
                        string temp = assoicationPath;
                        return new Query.PropertyQueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass>("Key.Department", temp);
                    }
                }
                
                public virtual Query.PropertyQueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass> Level {
                    get {
                        string temp = assoicationPath;
                        return new Query.PropertyQueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.WeirdClass>("Key.Level", temp);
                    }
                }
            }
        }
    }
    
    public partial class OrderBy {
        
        public partial class WeirdClass {
            
            public partial class Address {
                
                public static Query.OrderByClause Street {
                    get {
                        return new Query.OrderByClause("Address.Street");
                    }
                }
            }
            
            public partial class Key {
                
                public static Query.OrderByClause Department {
                    get {
                        return new Query.OrderByClause("Key.Department");
                    }
                }
                
                public static Query.OrderByClause Level {
                    get {
                        return new Query.OrderByClause("Key.Level");
                    }
                }
            }
        }
    }
}
